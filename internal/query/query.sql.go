// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countTotalArticle = `-- name: CountTotalArticle :exec
SELECT COUNT(*) as total_article FROM articles
`

func (q *Queries) CountTotalArticle(ctx context.Context) error {
	_, err := q.db.Exec(ctx, countTotalArticle)
	return err
}

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (id, author_id, title, body, created_at)
VALUES (
    $1,
    $2,
    $3,
    $4,
    NOW()
)
RETURNING id, author_id, title, body, created_at
`

type CreateArticleParams struct {
	ID       string
	AuthorID pgtype.Text
	Title    pgtype.Text
	Body     pgtype.Text
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (Article, error) {
	row := q.db.QueryRow(ctx, createArticle,
		arg.ID,
		arg.AuthorID,
		arg.Title,
		arg.Body,
	)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Title,
		&i.Body,
		&i.CreatedAt,
	)
	return i, err
}

const listArticlesFiltered = `-- name: ListArticlesFiltered :many
SELECT a.id, a.author_id, a.title, a.body, a.created_at
FROM articles a
JOIN authors u ON a.author_id = u.id
WHERE
  ($1 = '' OR (a.title ILIKE '%' || $1 || '%' OR a.body ILIKE '%' || $1 || '%'))
  AND
  ($2 = '' OR u.name ILIKE '%' || $2 || '%' )
ORDER BY a.created_at DESC
LIMIT $3 OFFSET $4
`

type ListArticlesFilteredParams struct {
	Column1 interface{}
	Column2 interface{}
	Limit   int32
	Offset  int32
}

func (q *Queries) ListArticlesFiltered(ctx context.Context, arg ListArticlesFilteredParams) ([]Article, error) {
	rows, err := q.db.Query(ctx, listArticlesFiltered,
		arg.Column1,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Title,
			&i.Body,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
